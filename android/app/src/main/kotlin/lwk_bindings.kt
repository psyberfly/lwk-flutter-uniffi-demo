// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package lwk_bindings;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.locks.ReentrantLock
import kotlin.concurrent.withLock

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_lwk_bindings_rustbuffer_alloc(size, status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun create(capacity: Int, len: Int, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity
            buf.len = len
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_lwk_bindings_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getInt(0))
        value.writeField("len", pointer.getInt(4))
        value.writeField("data", pointer.getPointer(8))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == 0.toByte()
    }

    fun isError(): Boolean {
        return code == 1.toByte()
    }

    fun isPanic(): Boolean {
        return code == 2.toByte()
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> uniffiRustCallWithError(errorHandler: UniffiRustCallStatusErrorHandler<E>, callback: (UniffiRustCallStatus) -> U): U {
    var status = UniffiRustCallStatus();
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun<E: Exception> uniffiCheckCallStatus(errorHandler: UniffiRustCallStatusErrorHandler<E>, status: UniffiRustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object UniffiNullRustCallStatusErrorHandler: UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback);
}

// IntegerType that matches Rust's `usize` / C's `size_t`
public class USize(value: Long = 0) : IntegerType(Native.SIZE_T_SIZE, value, true) {
    // This is needed to fill in the gaps of IntegerType's implementation of Number for Kotlin.
    override fun toByte() = toInt().toByte()
    // Needed until https://youtrack.jetbrains.com/issue/KT-47902 is fixed.
    @Deprecated("`toInt().toChar()` is deprecated")
    override fun toChar() = toInt().toChar()
    override fun toShort() = toInt().toShort()

    fun writeToBuffer(buf: ByteBuffer) {
        // Make sure we always write usize integers using native byte-order, since they may be
        // casted to pointer values
        buf.order(ByteOrder.nativeOrder())
        try {
            when (Native.SIZE_T_SIZE) {
                4 -> buf.putInt(toInt())
                8 -> buf.putLong(toLong())
                else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
            }
        } finally {
            buf.order(ByteOrder.BIG_ENDIAN)
        }
    }

    companion object {
        val size: Int
            get() = Native.SIZE_T_SIZE

        fun readFromBuffer(buf: ByteBuffer) : USize {
            // Make sure we always read usize integers using native byte-order, since they may be
            // casted from pointer values
            buf.order(ByteOrder.nativeOrder())
            try {
                return when (Native.SIZE_T_SIZE) {
                    4 -> USize(buf.getInt().toLong())
                    8 -> USize(buf.getLong())
                    else -> throw RuntimeException("Invalid SIZE_T_SIZE: ${Native.SIZE_T_SIZE}")
                }
            } finally {
                buf.order(ByteOrder.BIG_ENDIAN)
            }
        }
    }
}


// Map handles to objects
//
// This is used when the Rust code expects an opaque pointer to represent some foreign object.
// Normally we would pass a pointer to the object, but JNA doesn't support getting a pointer from an
// object reference , nor does it support leaking a reference to Rust.
//
// Instead, this class maps USize values to objects so that we can pass a pointer-sized type to
// Rust when it needs an opaque pointer.
//
// TODO: refactor callbacks to use this class
internal class UniFfiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<USize, T>()
    // Use AtomicInteger for our counter, since we may be on a 32-bit system.  4 billion possible
    // values seems like enough. If somehow we generate 4 billion handles, then this will wrap
    // around back to zero and we can assume the first handle generated will have been dropped by
    // then.
    private val counter = java.util.concurrent.atomic.AtomicInteger(0)

    val size: Int
        get() = map.size

    fun insert(obj: T): USize {
        val handle = USize(counter.getAndAdd(1).toLong())
        map.put(handle, obj)
        return handle
    }

    fun get(handle: USize): T? {
        return map.get(handle)
    }

    fun remove(handle: USize): T? {
        return map.remove(handle)
    }
}

// FFI type for Rust future continuations
internal interface UniFffiRustFutureContinuationCallbackType : com.sun.jna.Callback {
    fun callback(continuationHandle: USize, pollResult: Byte);
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "lwk_bindings"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            loadIndirect<UniffiLib>(componentName = "lwk_bindings")
            .also { lib: UniffiLib ->
                uniffiCheckContractApiVersion(lib)
                uniffiCheckApiChecksums(lib)
                uniffiCallbackInterfaceForeignPersister.register(lib)
                }
        }
        
        // The Cleaner for the whole library
        internal val CLEANER: UniffiCleaner by lazy {
            UniffiCleaner.create()
        }
    }

    fun uniffi_lwk_bindings_fn_clone_address(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_free_address(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lwk_bindings_fn_constructor_address_new(`s`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_address_is_blinded(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_lwk_bindings_fn_method_address_script_pubkey(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_address_to_unconfidential(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_address_uniffi_trait_display(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_clone_addressresult(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_free_addressresult(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lwk_bindings_fn_method_addressresult_address(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_addressresult_index(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun uniffi_lwk_bindings_fn_clone_electrumclient(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_free_electrumclient(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lwk_bindings_fn_constructor_electrumclient_new(`electrumUrl`: RustBuffer.ByValue,`tls`: Byte,`validateDomain`: Byte,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_electrumclient_broadcast(`ptr`: Pointer,`tx`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_electrumclient_full_scan(`ptr`: Pointer,`wollet`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_clone_esploraclient(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_free_esploraclient(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lwk_bindings_fn_constructor_esploraclient_new(`url`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_esploraclient_broadcast(`ptr`: Pointer,`tx`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_esploraclient_full_scan(`ptr`: Pointer,`wollet`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_clone_foreignpersister(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_free_foreignpersister(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lwk_bindings_fn_init_callback_foreignpersister(`handle`: ForeignCallback,
    ): Unit
    fun uniffi_lwk_bindings_fn_method_foreignpersister_get(`ptr`: Pointer,`index`: Long,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_method_foreignpersister_push(`ptr`: Pointer,`update`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lwk_bindings_fn_clone_foreignpersisterlink(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_free_foreignpersisterlink(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lwk_bindings_fn_constructor_foreignpersisterlink_new(`persister`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_clone_mnemonic(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_free_mnemonic(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lwk_bindings_fn_constructor_mnemonic_new(`s`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_mnemonic_uniffi_trait_display(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_clone_network(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_free_network(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lwk_bindings_fn_constructor_network_mainnet(uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_constructor_network_regtest(`policyAsset`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_constructor_network_regtest_default(uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_constructor_network_testnet(uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_network_default_electrum_client(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_network_default_esplora_client(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_network_is_mainnet(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun uniffi_lwk_bindings_fn_method_network_uniffi_trait_display(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_clone_outpoint(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_free_outpoint(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lwk_bindings_fn_constructor_outpoint_new(`s`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_outpoint_txid(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_outpoint_vout(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun uniffi_lwk_bindings_fn_method_outpoint_uniffi_trait_display(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_clone_pset(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_free_pset(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lwk_bindings_fn_constructor_pset_new(`base64`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_pset_extract_tx(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_pset_uniffi_trait_display(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_clone_script(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_free_script(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lwk_bindings_fn_constructor_script_new(`hex`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_script_asm(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_method_script_bytes(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_method_script_uniffi_trait_display(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_clone_signer(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_free_signer(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lwk_bindings_fn_constructor_signer_new(`mnemonic`: Pointer,`network`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_signer_sign(`ptr`: Pointer,`pset`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_signer_wpkh_slip77_descriptor(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_clone_transaction(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_free_transaction(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lwk_bindings_fn_constructor_transaction_new(`hex`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_transaction_bytes(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_method_transaction_txid(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_transaction_uniffi_trait_display(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_clone_txoutsecrets(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_free_txoutsecrets(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lwk_bindings_fn_method_txoutsecrets_asset(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_method_txoutsecrets_asset_bf(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_method_txoutsecrets_value(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun uniffi_lwk_bindings_fn_method_txoutsecrets_value_bf(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_clone_txid(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_free_txid(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lwk_bindings_fn_constructor_txid_new(`hex`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_txid_bytes(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_method_txid_uniffi_trait_display(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_clone_update(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_free_update(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lwk_bindings_fn_constructor_update_new(`bytes`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_update_serialize(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_clone_wallettx(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_free_wallettx(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lwk_bindings_fn_method_wallettx_balance(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_method_wallettx_fee(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun uniffi_lwk_bindings_fn_method_wallettx_height(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_method_wallettx_inputs(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_method_wallettx_outputs(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_method_wallettx_timestamp(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_method_wallettx_tx(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_wallettx_txid(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_wallettx_type_(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_clone_wallettxout(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_free_wallettxout(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lwk_bindings_fn_method_wallettxout_ext_int(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_method_wallettxout_height(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_method_wallettxout_outpoint(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_wallettxout_script_pubkey(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_wallettxout_unblinded(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_wallettxout_wildcard_index(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun uniffi_lwk_bindings_fn_clone_wollet(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_free_wollet(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lwk_bindings_fn_constructor_wollet_new(`network`: Pointer,`descriptor`: Pointer,`datadir`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_constructor_wollet_with_custom_persister(`network`: Pointer,`descriptor`: Pointer,`persister`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_wollet_address(`ptr`: Pointer,`index`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_wollet_apply_update(`ptr`: Pointer,`update`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lwk_bindings_fn_method_wollet_balance(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_method_wollet_create_lbtc_tx(`ptr`: Pointer,`outAddress`: Pointer,`satoshis`: Long,`feeRate`: Float,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_wollet_descriptor(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_wollet_finalize(`ptr`: Pointer,`pset`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_wollet_transactions(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun uniffi_lwk_bindings_fn_clone_wolletdescriptor(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_free_wolletdescriptor(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lwk_bindings_fn_constructor_wolletdescriptor_new(`descriptor`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun uniffi_lwk_bindings_fn_method_wolletdescriptor_uniffi_trait_display(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_lwk_bindings_rustbuffer_alloc(`size`: Int,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_lwk_bindings_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_lwk_bindings_rustbuffer_free(`buf`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun ffi_lwk_bindings_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Int,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_lwk_bindings_rust_future_poll_u8(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_lwk_bindings_rust_future_cancel_u8(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_free_u8(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_complete_u8(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun ffi_lwk_bindings_rust_future_poll_i8(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_lwk_bindings_rust_future_cancel_i8(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_free_i8(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_complete_i8(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Byte
    fun ffi_lwk_bindings_rust_future_poll_u16(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_lwk_bindings_rust_future_cancel_u16(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_free_u16(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_complete_u16(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    fun ffi_lwk_bindings_rust_future_poll_i16(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_lwk_bindings_rust_future_cancel_i16(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_free_i16(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_complete_i16(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Short
    fun ffi_lwk_bindings_rust_future_poll_u32(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_lwk_bindings_rust_future_cancel_u32(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_free_u32(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_complete_u32(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun ffi_lwk_bindings_rust_future_poll_i32(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_lwk_bindings_rust_future_cancel_i32(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_free_i32(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_complete_i32(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Int
    fun ffi_lwk_bindings_rust_future_poll_u64(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_lwk_bindings_rust_future_cancel_u64(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_free_u64(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_complete_u64(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun ffi_lwk_bindings_rust_future_poll_i64(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_lwk_bindings_rust_future_cancel_i64(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_free_i64(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_complete_i64(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Long
    fun ffi_lwk_bindings_rust_future_poll_f32(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_lwk_bindings_rust_future_cancel_f32(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_free_f32(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_complete_f32(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Float
    fun ffi_lwk_bindings_rust_future_poll_f64(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_lwk_bindings_rust_future_cancel_f64(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_free_f64(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_complete_f64(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Double
    fun ffi_lwk_bindings_rust_future_poll_pointer(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_lwk_bindings_rust_future_cancel_pointer(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_free_pointer(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_complete_pointer(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Pointer
    fun ffi_lwk_bindings_rust_future_poll_rust_buffer(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_lwk_bindings_rust_future_cancel_rust_buffer(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_free_rust_buffer(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_complete_rust_buffer(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): RustBuffer.ByValue
    fun ffi_lwk_bindings_rust_future_poll_void(`handle`: Pointer,`callback`: UniFffiRustFutureContinuationCallbackType,`callbackData`: USize,
    ): Unit
    fun ffi_lwk_bindings_rust_future_cancel_void(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_free_void(`handle`: Pointer,
    ): Unit
    fun ffi_lwk_bindings_rust_future_complete_void(`handle`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
    ): Unit
    fun uniffi_lwk_bindings_checksum_method_address_is_blinded(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_address_script_pubkey(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_address_to_unconfidential(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_addressresult_address(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_addressresult_index(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_electrumclient_broadcast(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_electrumclient_full_scan(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_esploraclient_broadcast(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_esploraclient_full_scan(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_foreignpersister_get(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_foreignpersister_push(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_network_default_electrum_client(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_network_default_esplora_client(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_network_is_mainnet(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_outpoint_txid(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_outpoint_vout(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_pset_extract_tx(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_script_asm(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_script_bytes(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_signer_sign(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_signer_wpkh_slip77_descriptor(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_transaction_bytes(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_transaction_txid(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_txoutsecrets_asset(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_txoutsecrets_asset_bf(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_txoutsecrets_value(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_txoutsecrets_value_bf(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_txid_bytes(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_update_serialize(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_wallettx_balance(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_wallettx_fee(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_wallettx_height(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_wallettx_inputs(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_wallettx_outputs(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_wallettx_timestamp(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_wallettx_tx(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_wallettx_txid(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_wallettx_type_(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_wallettxout_ext_int(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_wallettxout_height(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_wallettxout_outpoint(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_wallettxout_script_pubkey(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_wallettxout_unblinded(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_wallettxout_wildcard_index(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_wollet_address(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_wollet_apply_update(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_wollet_balance(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_wollet_create_lbtc_tx(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_wollet_descriptor(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_wollet_finalize(
    ): Short
    fun uniffi_lwk_bindings_checksum_method_wollet_transactions(
    ): Short
    fun uniffi_lwk_bindings_checksum_constructor_address_new(
    ): Short
    fun uniffi_lwk_bindings_checksum_constructor_electrumclient_new(
    ): Short
    fun uniffi_lwk_bindings_checksum_constructor_esploraclient_new(
    ): Short
    fun uniffi_lwk_bindings_checksum_constructor_foreignpersisterlink_new(
    ): Short
    fun uniffi_lwk_bindings_checksum_constructor_mnemonic_new(
    ): Short
    fun uniffi_lwk_bindings_checksum_constructor_network_mainnet(
    ): Short
    fun uniffi_lwk_bindings_checksum_constructor_network_regtest(
    ): Short
    fun uniffi_lwk_bindings_checksum_constructor_network_regtest_default(
    ): Short
    fun uniffi_lwk_bindings_checksum_constructor_network_testnet(
    ): Short
    fun uniffi_lwk_bindings_checksum_constructor_outpoint_new(
    ): Short
    fun uniffi_lwk_bindings_checksum_constructor_pset_new(
    ): Short
    fun uniffi_lwk_bindings_checksum_constructor_script_new(
    ): Short
    fun uniffi_lwk_bindings_checksum_constructor_signer_new(
    ): Short
    fun uniffi_lwk_bindings_checksum_constructor_transaction_new(
    ): Short
    fun uniffi_lwk_bindings_checksum_constructor_txid_new(
    ): Short
    fun uniffi_lwk_bindings_checksum_constructor_update_new(
    ): Short
    fun uniffi_lwk_bindings_checksum_constructor_wollet_new(
    ): Short
    fun uniffi_lwk_bindings_checksum_constructor_wollet_with_custom_persister(
    ): Short
    fun uniffi_lwk_bindings_checksum_constructor_wolletdescriptor_new(
    ): Short
    fun ffi_lwk_bindings_uniffi_contract_version(
    ): Int
    
}

private fun uniffiCheckContractApiVersion(lib: UniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 25
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_lwk_bindings_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: UniffiLib) {
    if (lib.uniffi_lwk_bindings_checksum_method_address_is_blinded() != 58036.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_address_script_pubkey() != 31691.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_address_to_unconfidential() != 1603.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_addressresult_address() != 24860.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_addressresult_index() != 9989.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_electrumclient_broadcast() != 57033.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_electrumclient_full_scan() != 55881.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_esploraclient_broadcast() != 42224.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_esploraclient_full_scan() != 42674.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_foreignpersister_get() != 30873.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_foreignpersister_push() != 26745.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_network_default_electrum_client() != 10682.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_network_default_esplora_client() != 59005.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_network_is_mainnet() != 48715.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_outpoint_txid() != 25778.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_outpoint_vout() != 18199.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_pset_extract_tx() != 39413.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_script_asm() != 43141.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_script_bytes() != 21380.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_signer_sign() != 60905.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_signer_wpkh_slip77_descriptor() != 16376.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_transaction_bytes() != 35272.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_transaction_txid() != 5137.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_txoutsecrets_asset() != 25098.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_txoutsecrets_asset_bf() != 457.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_txoutsecrets_value() != 8760.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_txoutsecrets_value_bf() != 25188.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_txid_bytes() != 52921.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_update_serialize() != 11731.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_wallettx_balance() != 57291.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_wallettx_fee() != 48597.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_wallettx_height() != 37028.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_wallettx_inputs() != 5673.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_wallettx_outputs() != 54060.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_wallettx_timestamp() != 15707.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_wallettx_tx() != 7623.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_wallettx_txid() != 3347.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_wallettx_type_() != 13637.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_wallettxout_ext_int() != 9481.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_wallettxout_height() != 62768.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_wallettxout_outpoint() != 27550.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_wallettxout_script_pubkey() != 40702.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_wallettxout_unblinded() != 40680.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_wallettxout_wildcard_index() != 30741.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_wollet_address() != 52044.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_wollet_apply_update() != 43266.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_wollet_balance() != 57787.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_wollet_create_lbtc_tx() != 51372.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_wollet_descriptor() != 37274.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_wollet_finalize() != 44644.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_method_wollet_transactions() != 50706.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_constructor_address_new() != 48256.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_constructor_electrumclient_new() != 53205.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_constructor_esploraclient_new() != 28325.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_constructor_foreignpersisterlink_new() != 48731.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_constructor_mnemonic_new() != 672.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_constructor_network_mainnet() != 49347.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_constructor_network_regtest() != 61849.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_constructor_network_regtest_default() != 28710.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_constructor_network_testnet() != 58207.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_constructor_outpoint_new() != 60901.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_constructor_pset_new() != 56942.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_constructor_script_new() != 29899.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_constructor_signer_new() != 31261.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_constructor_transaction_new() != 30824.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_constructor_txid_new() != 26103.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_constructor_update_new() != 42452.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_constructor_wollet_new() != 41549.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_constructor_wollet_with_custom_persister() != 50774.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_lwk_bindings_checksum_constructor_wolletdescriptor_new() != 60947.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Async support

// Public interface members begin here.


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterLong: FfiConverter<Long, Long> {
    override fun lift(value: Long): Long {
        return value
    }

    override fun read(buf: ByteBuffer): Long {
        return buf.getLong()
    }

    override fun lower(value: Long): Long {
        return value
    }

    override fun allocationSize(value: Long) = 8

    override fun write(value: Long, buf: ByteBuffer) {
        buf.putLong(value)
    }
}

public object FfiConverterFloat: FfiConverter<Float, Float> {
    override fun lift(value: Float): Float {
        return value
    }

    override fun read(buf: ByteBuffer): Float {
        return buf.getFloat()
    }

    override fun lower(value: Float): Float {
        return value
    }

    override fun allocationSize(value: Float) = 4

    override fun write(value: Float, buf: ByteBuffer) {
        buf.putFloat(value)
    }
}

public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}

public object FfiConverterByteArray: FfiConverterRustBuffer<ByteArray> {
    override fun read(buf: ByteBuffer): ByteArray {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr
    }
    override fun allocationSize(value: ByteArray): Int {
        return 4 + value.size
    }
    override fun write(value: ByteArray, buf: ByteBuffer) {
        buf.putInt(value.size)
        buf.put(value)
    }
}



// The cleaner interface for Object finalization code to run.
// This is the entry point to any implementation that we're using.
//
// The cleaner registers objects and returns cleanables, so now we are
// defining a `UniffiCleaner` with a `UniffiClenaer.Cleanable` to abstract the
// different implmentations available at compile time.
interface UniffiCleaner {
    interface Cleanable {
        fun clean()
    }

    fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable

    companion object
}

// The fallback Jna cleaner, which is available for both Android, and the JVM.
private class UniffiJnaCleaner : UniffiCleaner {
    private val cleaner = com.sun.jna.internal.Cleaner.getCleaner()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        UniffiJnaCleanable(cleaner.register(value, cleanUpTask))
}

private class UniffiJnaCleanable(
    private val cleanable: com.sun.jna.internal.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

// We decide at uniffi binding generation time whether we were
// using Android or not.
// There are further runtime checks to chose the correct implementation
// of the cleaner.
private fun UniffiCleaner.Companion.create(): UniffiCleaner =
    try {
        // For safety's sake: if the library hasn't been run in android_cleaner = true
        // mode, but is being run on Android, then we still need to think about
        // Android API versions.
        // So we check if java.lang.ref.Cleaner is there, and use that…
        java.lang.Class.forName("java.lang.ref.Cleaner")
        JavaLangRefCleaner()
    } catch (e: ClassNotFoundException) {
        // … otherwise, fallback to the JNA cleaner.
        UniffiJnaCleaner()
    }

private class JavaLangRefCleaner : UniffiCleaner {
    val cleaner = java.lang.ref.Cleaner.create()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        JavaLangRefCleanable(cleaner.register(value, cleanUpTask))
}

private class JavaLangRefCleanable(
    val cleanable: java.lang.ref.Cleaner.Cleanable
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

// The base class for all UniFFI Object types.
//
// This class provides core operations for working with the Rust `Arc<T>` pointer to
// the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// the Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each `FFIObject` instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an `FFIObject` is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an `FFIObject` instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each `FFIObject` an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//
abstract class FFIObject: Disposable, AutoCloseable {

    constructor(pointer: Pointer) {
        this.pointer = pointer
    }

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
    }

    protected val pointer: Pointer?
    protected abstract val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    open fun uniffiClonePointer(): Pointer {
        // Overridden by generated subclasses, the default method exists to allow users to manually
        // implement the interface
        throw RuntimeException("uniffiClonePointer not implemented")
    }

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }
}

/** Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly. */
object NoPointer


public interface AddressInterface {
    
    fun `isBlinded`(): Boolean
    
    fun `scriptPubkey`(): Script
    
    fun `toUnconfidential`(): Address
    
    companion object
}

open class Address : FFIObject, AddressInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)
    /**
     * Construct an Address object
     */
    constructor(`s`: String) :
        this(
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_constructor_address_new(FfiConverterString.lower(`s`),_status)
})

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_free_address(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_clone_address(pointer!!, status)
        }
    }

    override fun `isBlinded`(): Boolean =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_address_is_blinded(it,
        
        _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    override fun `scriptPubkey`(): Script =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_address_script_pubkey(it,
        
        _status)
}
        }.let {
            FfiConverterTypeScript.lift(it)
        }
    
    override fun `toUnconfidential`(): Address =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_address_to_unconfidential(it,
        
        _status)
}
        }.let {
            FfiConverterTypeAddress.lift(it)
        }
    
    
    override fun toString(): String =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_address_uniffi_trait_display(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }

    
    companion object
    
}

public object FfiConverterTypeAddress: FfiConverter<Address, Pointer> {

    override fun lower(value: Address): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): Address {
        return Address(value)
    }

    override fun read(buf: ByteBuffer): Address {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Address) = 8

    override fun write(value: Address, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





public interface AddressResultInterface {
    
    fun `address`(): Address
    
    fun `index`(): UInt
    
    companion object
}

open class AddressResult : FFIObject, AddressResultInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_free_addressresult(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_clone_addressresult(pointer!!, status)
        }
    }

    override fun `address`(): Address =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_addressresult_address(it,
        
        _status)
}
        }.let {
            FfiConverterTypeAddress.lift(it)
        }
    
    override fun `index`(): UInt =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_addressresult_index(it,
        
        _status)
}
        }.let {
            FfiConverterUInt.lift(it)
        }
    
    

    
    companion object
    
}

public object FfiConverterTypeAddressResult: FfiConverter<AddressResult, Pointer> {

    override fun lower(value: AddressResult): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): AddressResult {
        return AddressResult(value)
    }

    override fun read(buf: ByteBuffer): AddressResult {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: AddressResult) = 8

    override fun write(value: AddressResult, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





public interface ElectrumClientInterface {
    
    fun `broadcast`(`tx`: Transaction): Txid
    
    fun `fullScan`(`wollet`: Wollet): Update?
    
    companion object
}

open class ElectrumClient : FFIObject, ElectrumClientInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)
    /**
     * Construct an Electrum client
     */
    constructor(`electrumUrl`: String, `tls`: Boolean, `validateDomain`: Boolean) :
        this(
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_constructor_electrumclient_new(FfiConverterString.lower(`electrumUrl`),FfiConverterBoolean.lower(`tls`),FfiConverterBoolean.lower(`validateDomain`),_status)
})

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_free_electrumclient(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_clone_electrumclient(pointer!!, status)
        }
    }

    
    @Throws(LwkException::class)override fun `broadcast`(`tx`: Transaction): Txid =
        callWithPointer {
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_electrumclient_broadcast(it,
        FfiConverterTypeTransaction.lower(`tx`),
        _status)
}
        }.let {
            FfiConverterTypeTxid.lift(it)
        }
    
    
    @Throws(LwkException::class)override fun `fullScan`(`wollet`: Wollet): Update? =
        callWithPointer {
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_electrumclient_full_scan(it,
        FfiConverterTypeWollet.lower(`wollet`),
        _status)
}
        }.let {
            FfiConverterOptionalTypeUpdate.lift(it)
        }
    
    

    
    companion object
    
}

public object FfiConverterTypeElectrumClient: FfiConverter<ElectrumClient, Pointer> {

    override fun lower(value: ElectrumClient): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): ElectrumClient {
        return ElectrumClient(value)
    }

    override fun read(buf: ByteBuffer): ElectrumClient {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: ElectrumClient) = 8

    override fun write(value: ElectrumClient, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





public interface EsploraClientInterface {
    
    fun `broadcast`(`tx`: Transaction): Txid
    
    fun `fullScan`(`wollet`: Wollet): Update?
    
    companion object
}

open class EsploraClient : FFIObject, EsploraClientInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)
    /**
     * Construct an Esplora Client
     */
    constructor(`url`: String) :
        this(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_constructor_esploraclient_new(FfiConverterString.lower(`url`),_status)
})

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_free_esploraclient(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_clone_esploraclient(pointer!!, status)
        }
    }

    
    @Throws(LwkException::class)override fun `broadcast`(`tx`: Transaction): Txid =
        callWithPointer {
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_esploraclient_broadcast(it,
        FfiConverterTypeTransaction.lower(`tx`),
        _status)
}
        }.let {
            FfiConverterTypeTxid.lift(it)
        }
    
    
    @Throws(LwkException::class)override fun `fullScan`(`wollet`: Wollet): Update? =
        callWithPointer {
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_esploraclient_full_scan(it,
        FfiConverterTypeWollet.lower(`wollet`),
        _status)
}
        }.let {
            FfiConverterOptionalTypeUpdate.lift(it)
        }
    
    

    
    companion object
    
}

public object FfiConverterTypeEsploraClient: FfiConverter<EsploraClient, Pointer> {

    override fun lower(value: EsploraClient): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): EsploraClient {
        return EsploraClient(value)
    }

    override fun read(buf: ByteBuffer): EsploraClient {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: EsploraClient) = 8

    override fun write(value: EsploraClient, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





public interface ForeignPersister {
    
    fun `get`(`index`: ULong): Update?
    
    fun `push`(`update`: Update)
    
    companion object
}

open class ForeignPersisterImpl : FFIObject, ForeignPersister {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_free_foreignpersister(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_clone_foreignpersister(pointer!!, status)
        }
    }

    
    @Throws(LwkException::class)override fun `get`(`index`: ULong): Update? =
        callWithPointer {
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_foreignpersister_get(it,
        FfiConverterULong.lower(`index`),
        _status)
}
        }.let {
            FfiConverterOptionalTypeUpdate.lift(it)
        }
    
    
    @Throws(LwkException::class)override fun `push`(`update`: Update) =
        callWithPointer {
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_foreignpersister_push(it,
        FfiConverterTypeUpdate.lower(`update`),
        _status)
}
        }
    
    
    

    
    companion object
    
}


internal typealias UniffiHandle = Long
internal class ConcurrentHandleMap<T>(
    private val leftMap: MutableMap<UniffiHandle, T> = mutableMapOf(),
) {
    private val lock = java.util.concurrent.locks.ReentrantLock()
    private val currentHandle = AtomicLong(0L)
    private val stride = 1L

    fun insert(obj: T): UniffiHandle =
        lock.withLock {
            currentHandle.getAndAdd(stride)
                .also { handle ->
                    leftMap[handle] = obj
                }
            }

    fun get(handle: UniffiHandle) = lock.withLock {
        leftMap[handle] ?: throw InternalException("No callback in handlemap; this is a Uniffi bug")
    }

    fun delete(handle: UniffiHandle) {
        this.remove(handle)
    }

    fun remove(handle: UniffiHandle): T? =
        lock.withLock {
            leftMap.remove(handle)
        }
}

interface ForeignCallback : com.sun.jna.Callback {
    public fun invoke(handle: UniffiHandle, method: Int, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0
// Callback return codes
internal const val UNIFFI_CALLBACK_SUCCESS = 0
internal const val UNIFFI_CALLBACK_ERROR = 1
internal const val UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

public abstract class FfiConverterCallbackInterface<CallbackInterface>: FfiConverter<CallbackInterface, UniffiHandle> {
    internal val handleMap = ConcurrentHandleMap<CallbackInterface>()

    internal fun drop(handle: UniffiHandle) {
        handleMap.remove(handle)
    }

    override fun lift(value: UniffiHandle): CallbackInterface {
        return handleMap.get(value)
    }

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) = handleMap.insert(value)

    override fun allocationSize(value: CallbackInterface) = 8

    override fun write(value: CallbackInterface, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}

// Implement the foreign callback handler for ForeignPersister
internal class UniffiCallbackInterfaceForeignPersister : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: UniffiHandle, method: Int, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeForeignPersister.handleMap.get(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeForeignPersister.handleMap.remove(handle)

                // Successful return
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                UNIFFI_CALLBACK_SUCCESS
            }
            1 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokeGet`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            2 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for info
                try {
                    this.`invokePush`(cb, argsData, argsLen, outBuf)
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    UNIFFI_CALLBACK_UNEXPECTED_ERROR
                }
            }
            
            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
                try {
                    // Try to serialize the error into a string
                    outBuf.setValue(FfiConverterString.lower("Invalid Callback index"))
                } catch (e: Throwable) {
                    // If that fails, then it's time to give up and just return
                }
                UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        }
    }

    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokeGet`(kotlinCallbackInterface: ForeignPersister, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            val returnValue = kotlinCallbackInterface.`get`(
                FfiConverterULong.read(argsBuf)
                
            )
            outBuf.setValue(FfiConverterOptionalTypeUpdate.lowerIntoRustBuffer(returnValue))
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError()  : Int = try {
            makeCall()
        } catch (e: LwkException) {
            // Expected error, serialize it into outBuf
            outBuf.setValue(FfiConverterTypeLwkError.lowerIntoRustBuffer(e))
            UNIFFI_CALLBACK_ERROR
        }

        return makeCallAndHandleError()
    }
    
    @Suppress("UNUSED_PARAMETER")
    private fun `invokePush`(kotlinCallbackInterface: ForeignPersister, argsData: Pointer, argsLen: Int, outBuf: RustBufferByReference): Int {
        val argsBuf = argsData.getByteBuffer(0, argsLen.toLong()).also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
        fun makeCall() : Int {
            kotlinCallbackInterface.`push`(
                FfiConverterTypeUpdate.read(argsBuf)
            )
            return UNIFFI_CALLBACK_SUCCESS
        }
        fun makeCallAndHandleError()  : Int = try {
            makeCall()
        } catch (e: LwkException) {
            // Expected error, serialize it into outBuf
            outBuf.setValue(FfiConverterTypeLwkError.lowerIntoRustBuffer(e))
            UNIFFI_CALLBACK_ERROR
        }

        return makeCallAndHandleError()
    }
    

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_lwk_bindings_fn_init_callback_foreignpersister(this)
    }
}

internal val uniffiCallbackInterfaceForeignPersister = UniffiCallbackInterfaceForeignPersister()

public object FfiConverterTypeForeignPersister: FfiConverter<ForeignPersister, Pointer> {
    internal val handleMap = ConcurrentHandleMap<ForeignPersister>()

    override fun lower(value: ForeignPersister): Pointer {
        return Pointer(handleMap.insert(value))
    }

    override fun lift(value: Pointer): ForeignPersister {
        return ForeignPersisterImpl(value)
    }

    override fun read(buf: ByteBuffer): ForeignPersister {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: ForeignPersister) = 8

    override fun write(value: ForeignPersister, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





public interface ForeignPersisterLinkInterface {
    
    companion object
}

open class ForeignPersisterLink : FFIObject, ForeignPersisterLinkInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)
    constructor(`persister`: ForeignPersister) :
        this(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_constructor_foreignpersisterlink_new(FfiConverterTypeForeignPersister.lower(`persister`),_status)
})

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_free_foreignpersisterlink(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_clone_foreignpersisterlink(pointer!!, status)
        }
    }

    

    
    companion object
    
}

public object FfiConverterTypeForeignPersisterLink: FfiConverter<ForeignPersisterLink, Pointer> {

    override fun lower(value: ForeignPersisterLink): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): ForeignPersisterLink {
        return ForeignPersisterLink(value)
    }

    override fun read(buf: ByteBuffer): ForeignPersisterLink {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: ForeignPersisterLink) = 8

    override fun write(value: ForeignPersisterLink, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





public interface MnemonicInterface {
    
    companion object
}

open class Mnemonic : FFIObject, MnemonicInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)
    /**
     * Construct a Script object
     */
    constructor(`s`: String) :
        this(
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_constructor_mnemonic_new(FfiConverterString.lower(`s`),_status)
})

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_free_mnemonic(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_clone_mnemonic(pointer!!, status)
        }
    }

    
    override fun toString(): String =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_mnemonic_uniffi_trait_display(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }

    
    companion object
    
}

public object FfiConverterTypeMnemonic: FfiConverter<Mnemonic, Pointer> {

    override fun lower(value: Mnemonic): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): Mnemonic {
        return Mnemonic(value)
    }

    override fun read(buf: ByteBuffer): Mnemonic {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Mnemonic) = 8

    override fun write(value: Mnemonic, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





public interface NetworkInterface {
    
    fun `defaultElectrumClient`(): ElectrumClient
    
    fun `defaultEsploraClient`(): EsploraClient
    
    fun `isMainnet`(): Boolean
    
    companion object
}

open class Network : FFIObject, NetworkInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_free_network(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_clone_network(pointer!!, status)
        }
    }

    
    @Throws(LwkException::class)override fun `defaultElectrumClient`(): ElectrumClient =
        callWithPointer {
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_network_default_electrum_client(it,
        
        _status)
}
        }.let {
            FfiConverterTypeElectrumClient.lift(it)
        }
    
    override fun `defaultEsploraClient`(): EsploraClient =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_network_default_esplora_client(it,
        
        _status)
}
        }.let {
            FfiConverterTypeEsploraClient.lift(it)
        }
    
    override fun `isMainnet`(): Boolean =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_network_is_mainnet(it,
        
        _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    
    override fun toString(): String =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_network_uniffi_trait_display(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }

    companion object {
        
        fun `mainnet`(): Network =
            Network(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_constructor_network_mainnet(_status)
})
        
        fun `regtest`(`policyAsset`: AssetId): Network =
            Network(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_constructor_network_regtest(FfiConverterTypeAssetId.lower(`policyAsset`),_status)
})
        
        fun `regtestDefault`(): Network =
            Network(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_constructor_network_regtest_default(_status)
})
        
        fun `testnet`(): Network =
            Network(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_constructor_network_testnet(_status)
})
        
    }
    
}

public object FfiConverterTypeNetwork: FfiConverter<Network, Pointer> {

    override fun lower(value: Network): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): Network {
        return Network(value)
    }

    override fun read(buf: ByteBuffer): Network {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Network) = 8

    override fun write(value: Network, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





public interface OutPointInterface {
    
    fun `txid`(): Txid
    
    fun `vout`(): UInt
    
    companion object
}

open class OutPoint : FFIObject, OutPointInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)
    /**
     * Construct an OutPoint object
     */
    constructor(`s`: String) :
        this(
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_constructor_outpoint_new(FfiConverterString.lower(`s`),_status)
})

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_free_outpoint(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_clone_outpoint(pointer!!, status)
        }
    }

    override fun `txid`(): Txid =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_outpoint_txid(it,
        
        _status)
}
        }.let {
            FfiConverterTypeTxid.lift(it)
        }
    
    override fun `vout`(): UInt =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_outpoint_vout(it,
        
        _status)
}
        }.let {
            FfiConverterUInt.lift(it)
        }
    
    
    override fun toString(): String =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_outpoint_uniffi_trait_display(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }

    
    companion object
    
}

public object FfiConverterTypeOutPoint: FfiConverter<OutPoint, Pointer> {

    override fun lower(value: OutPoint): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): OutPoint {
        return OutPoint(value)
    }

    override fun read(buf: ByteBuffer): OutPoint {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: OutPoint) = 8

    override fun write(value: OutPoint, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





/**
 * Partially Signed Elements Transaction
 */
public interface PsetInterface {
    
    fun `extractTx`(): Transaction
    
    companion object
}

/**
 * Partially Signed Elements Transaction
 */
open class Pset : FFIObject, PsetInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)
    /**
     * Construct a Watch-Only wallet object
     */
    constructor(`base64`: String) :
        this(
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_constructor_pset_new(FfiConverterString.lower(`base64`),_status)
})

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_free_pset(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_clone_pset(pointer!!, status)
        }
    }

    
    @Throws(LwkException::class)override fun `extractTx`(): Transaction =
        callWithPointer {
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_pset_extract_tx(it,
        
        _status)
}
        }.let {
            FfiConverterTypeTransaction.lift(it)
        }
    
    
    override fun toString(): String =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_pset_uniffi_trait_display(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }

    
    companion object
    
}

public object FfiConverterTypePset: FfiConverter<Pset, Pointer> {

    override fun lower(value: Pset): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): Pset {
        return Pset(value)
    }

    override fun read(buf: ByteBuffer): Pset {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Pset) = 8

    override fun write(value: Pset, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





public interface ScriptInterface {
    
    fun `asm`(): String
    
    fun `bytes`(): ByteArray
    
    companion object
}

open class Script : FFIObject, ScriptInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)
    /**
     * Construct a Script object
     */
    constructor(`hex`: Hex) :
        this(
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_constructor_script_new(FfiConverterTypeHex.lower(`hex`),_status)
})

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_free_script(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_clone_script(pointer!!, status)
        }
    }

    override fun `asm`(): String =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_script_asm(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    override fun `bytes`(): ByteArray =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_script_bytes(it,
        
        _status)
}
        }.let {
            FfiConverterByteArray.lift(it)
        }
    
    
    override fun toString(): String =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_script_uniffi_trait_display(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }

    
    companion object
    
}

public object FfiConverterTypeScript: FfiConverter<Script, Pointer> {

    override fun lower(value: Script): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): Script {
        return Script(value)
    }

    override fun read(buf: ByteBuffer): Script {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Script) = 8

    override fun write(value: Script, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





/**
 * A Software signer
 */
public interface SignerInterface {
    
    fun `sign`(`pset`: Pset): Pset
    
    fun `wpkhSlip77Descriptor`(): WolletDescriptor
    
    companion object
}

/**
 * A Software signer
 */
open class Signer : FFIObject, SignerInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)
    /**
     * Construct a software signer
     */
    constructor(`mnemonic`: Mnemonic, `network`: Network) :
        this(
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_constructor_signer_new(FfiConverterTypeMnemonic.lower(`mnemonic`),FfiConverterTypeNetwork.lower(`network`),_status)
})

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_free_signer(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_clone_signer(pointer!!, status)
        }
    }

    
    @Throws(LwkException::class)override fun `sign`(`pset`: Pset): Pset =
        callWithPointer {
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_signer_sign(it,
        FfiConverterTypePset.lower(`pset`),
        _status)
}
        }.let {
            FfiConverterTypePset.lift(it)
        }
    
    
    @Throws(LwkException::class)override fun `wpkhSlip77Descriptor`(): WolletDescriptor =
        callWithPointer {
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_signer_wpkh_slip77_descriptor(it,
        
        _status)
}
        }.let {
            FfiConverterTypeWolletDescriptor.lift(it)
        }
    
    

    
    companion object
    
}

public object FfiConverterTypeSigner: FfiConverter<Signer, Pointer> {

    override fun lower(value: Signer): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): Signer {
        return Signer(value)
    }

    override fun read(buf: ByteBuffer): Signer {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Signer) = 8

    override fun write(value: Signer, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





public interface TransactionInterface {
    
    fun `bytes`(): ByteArray
    
    fun `txid`(): Txid
    
    companion object
}

open class Transaction : FFIObject, TransactionInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)
    /**
     * Construct a Transaction object
     */
    constructor(`hex`: Hex) :
        this(
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_constructor_transaction_new(FfiConverterTypeHex.lower(`hex`),_status)
})

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_free_transaction(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_clone_transaction(pointer!!, status)
        }
    }

    override fun `bytes`(): ByteArray =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_transaction_bytes(it,
        
        _status)
}
        }.let {
            FfiConverterByteArray.lift(it)
        }
    
    override fun `txid`(): Txid =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_transaction_txid(it,
        
        _status)
}
        }.let {
            FfiConverterTypeTxid.lift(it)
        }
    
    
    override fun toString(): String =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_transaction_uniffi_trait_display(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }

    
    companion object
    
}

public object FfiConverterTypeTransaction: FfiConverter<Transaction, Pointer> {

    override fun lower(value: Transaction): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): Transaction {
        return Transaction(value)
    }

    override fun read(buf: ByteBuffer): Transaction {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Transaction) = 8

    override fun write(value: Transaction, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





public interface TxOutSecretsInterface {
    
    fun `asset`(): AssetId
    
    fun `assetBf`(): Hex
    
    fun `value`(): ULong
    
    fun `valueBf`(): Hex
    
    companion object
}

open class TxOutSecrets : FFIObject, TxOutSecretsInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_free_txoutsecrets(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_clone_txoutsecrets(pointer!!, status)
        }
    }

    override fun `asset`(): AssetId =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_txoutsecrets_asset(it,
        
        _status)
}
        }.let {
            FfiConverterTypeAssetId.lift(it)
        }
    
    override fun `assetBf`(): Hex =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_txoutsecrets_asset_bf(it,
        
        _status)
}
        }.let {
            FfiConverterTypeHex.lift(it)
        }
    
    override fun `value`(): ULong =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_txoutsecrets_value(it,
        
        _status)
}
        }.let {
            FfiConverterULong.lift(it)
        }
    
    override fun `valueBf`(): Hex =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_txoutsecrets_value_bf(it,
        
        _status)
}
        }.let {
            FfiConverterTypeHex.lift(it)
        }
    
    

    
    companion object
    
}

public object FfiConverterTypeTxOutSecrets: FfiConverter<TxOutSecrets, Pointer> {

    override fun lower(value: TxOutSecrets): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): TxOutSecrets {
        return TxOutSecrets(value)
    }

    override fun read(buf: ByteBuffer): TxOutSecrets {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: TxOutSecrets) = 8

    override fun write(value: TxOutSecrets, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





public interface TxidInterface {
    
    fun `bytes`(): ByteArray
    
    companion object
}

open class Txid : FFIObject, TxidInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)
    /**
     * Construct a Txid object
     */
    constructor(`hex`: Hex) :
        this(
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_constructor_txid_new(FfiConverterTypeHex.lower(`hex`),_status)
})

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_free_txid(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_clone_txid(pointer!!, status)
        }
    }

    override fun `bytes`(): ByteArray =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_txid_bytes(it,
        
        _status)
}
        }.let {
            FfiConverterByteArray.lift(it)
        }
    
    
    override fun toString(): String =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_txid_uniffi_trait_display(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }

    
    companion object
    
}

public object FfiConverterTypeTxid: FfiConverter<Txid, Pointer> {

    override fun lower(value: Txid): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): Txid {
        return Txid(value)
    }

    override fun read(buf: ByteBuffer): Txid {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Txid) = 8

    override fun write(value: Txid, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





public interface UpdateInterface {
    
    fun `serialize`(): ByteArray
    
    companion object
}

open class Update : FFIObject, UpdateInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)
    constructor(`bytes`: ByteArray) :
        this(
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_constructor_update_new(FfiConverterByteArray.lower(`bytes`),_status)
})

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_free_update(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_clone_update(pointer!!, status)
        }
    }

    
    @Throws(LwkException::class)override fun `serialize`(): ByteArray =
        callWithPointer {
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_update_serialize(it,
        
        _status)
}
        }.let {
            FfiConverterByteArray.lift(it)
        }
    
    

    
    companion object
    
}

public object FfiConverterTypeUpdate: FfiConverter<Update, Pointer> {

    override fun lower(value: Update): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): Update {
        return Update(value)
    }

    override fun read(buf: ByteBuffer): Update {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Update) = 8

    override fun write(value: Update, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





public interface WalletTxInterface {
    
    fun `balance`(): Map<AssetId, Long>
    
    fun `fee`(): ULong
    
    fun `height`(): UInt?
    
    fun `inputs`(): List<WalletTxOut?>
    
    fun `outputs`(): List<WalletTxOut?>
    
    fun `timestamp`(): UInt?
    
    fun `tx`(): Transaction
    
    fun `txid`(): Txid
    
    fun `type`(): String
    
    companion object
}

open class WalletTx : FFIObject, WalletTxInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_free_wallettx(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_clone_wallettx(pointer!!, status)
        }
    }

    override fun `balance`(): Map<AssetId, Long> =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_wallettx_balance(it,
        
        _status)
}
        }.let {
            FfiConverterMapTypeAssetIdLong.lift(it)
        }
    
    override fun `fee`(): ULong =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_wallettx_fee(it,
        
        _status)
}
        }.let {
            FfiConverterULong.lift(it)
        }
    
    override fun `height`(): UInt? =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_wallettx_height(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalUInt.lift(it)
        }
    
    override fun `inputs`(): List<WalletTxOut?> =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_wallettx_inputs(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceOptionalTypeWalletTxOut.lift(it)
        }
    
    override fun `outputs`(): List<WalletTxOut?> =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_wallettx_outputs(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceOptionalTypeWalletTxOut.lift(it)
        }
    
    override fun `timestamp`(): UInt? =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_wallettx_timestamp(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalUInt.lift(it)
        }
    
    override fun `tx`(): Transaction =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_wallettx_tx(it,
        
        _status)
}
        }.let {
            FfiConverterTypeTransaction.lift(it)
        }
    
    override fun `txid`(): Txid =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_wallettx_txid(it,
        
        _status)
}
        }.let {
            FfiConverterTypeTxid.lift(it)
        }
    
    override fun `type`(): String =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_wallettx_type_(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    

    
    companion object
    
}

public object FfiConverterTypeWalletTx: FfiConverter<WalletTx, Pointer> {

    override fun lower(value: WalletTx): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): WalletTx {
        return WalletTx(value)
    }

    override fun read(buf: ByteBuffer): WalletTx {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: WalletTx) = 8

    override fun write(value: WalletTx, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





public interface WalletTxOutInterface {
    
    fun `extInt`(): Chain
    
    fun `height`(): UInt?
    
    fun `outpoint`(): OutPoint
    
    fun `scriptPubkey`(): Script
    
    fun `unblinded`(): TxOutSecrets
    
    fun `wildcardIndex`(): UInt
    
    companion object
}

open class WalletTxOut : FFIObject, WalletTxOutInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_free_wallettxout(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_clone_wallettxout(pointer!!, status)
        }
    }

    override fun `extInt`(): Chain =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_wallettxout_ext_int(it,
        
        _status)
}
        }.let {
            FfiConverterTypeChain.lift(it)
        }
    
    override fun `height`(): UInt? =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_wallettxout_height(it,
        
        _status)
}
        }.let {
            FfiConverterOptionalUInt.lift(it)
        }
    
    override fun `outpoint`(): OutPoint =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_wallettxout_outpoint(it,
        
        _status)
}
        }.let {
            FfiConverterTypeOutPoint.lift(it)
        }
    
    override fun `scriptPubkey`(): Script =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_wallettxout_script_pubkey(it,
        
        _status)
}
        }.let {
            FfiConverterTypeScript.lift(it)
        }
    
    override fun `unblinded`(): TxOutSecrets =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_wallettxout_unblinded(it,
        
        _status)
}
        }.let {
            FfiConverterTypeTxOutSecrets.lift(it)
        }
    
    override fun `wildcardIndex`(): UInt =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_wallettxout_wildcard_index(it,
        
        _status)
}
        }.let {
            FfiConverterUInt.lift(it)
        }
    
    

    
    companion object
    
}

public object FfiConverterTypeWalletTxOut: FfiConverter<WalletTxOut, Pointer> {

    override fun lower(value: WalletTxOut): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): WalletTxOut {
        return WalletTxOut(value)
    }

    override fun read(buf: ByteBuffer): WalletTxOut {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: WalletTxOut) = 8

    override fun write(value: WalletTxOut, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





/**
 * A Watch-Only wallet
 */
public interface WolletInterface {
    
    fun `address`(`index`: UInt?): AddressResult
    
    fun `applyUpdate`(`update`: Update)
    
    fun `balance`(): Map<AssetId, ULong>
    
    fun `createLbtcTx`(`outAddress`: Address, `satoshis`: ULong, `feeRate`: Float): Pset
    
    fun `descriptor`(): WolletDescriptor
    
    fun `finalize`(`pset`: Pset): Pset
    
    fun `transactions`(): List<WalletTx>
    
    companion object
}

/**
 * A Watch-Only wallet
 */
open class Wollet : FFIObject, WolletInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)
    /**
     * Construct a Watch-Only wallet object
     */
    constructor(`network`: Network, `descriptor`: WolletDescriptor, `datadir`: String?) :
        this(
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_constructor_wollet_new(FfiConverterTypeNetwork.lower(`network`),FfiConverterTypeWolletDescriptor.lower(`descriptor`),FfiConverterOptionalString.lower(`datadir`),_status)
})

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_free_wollet(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_clone_wollet(pointer!!, status)
        }
    }

    
    @Throws(LwkException::class)
    override fun `address`(index: UInt?): AddressResult =
        callWithPointer {
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_wollet_address(it,
        FfiConverterOptionalUInt.lower(`index`),
        _status)
}
        }.let {
            FfiConverterTypeAddressResult.lift(it)
        }
    
    
    @Throws(LwkException::class)override fun `applyUpdate`(`update`: Update) =
        callWithPointer {
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_wollet_apply_update(it,
        FfiConverterTypeUpdate.lower(`update`),
        _status)
}
        }
    
    
    
    @Throws(LwkException::class)override fun `balance`(): Map<AssetId, ULong> =
        callWithPointer {
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_wollet_balance(it,
        
        _status)
}
        }.let {
            FfiConverterMapTypeAssetIdULong.lift(it)
        }
    
    
    @Throws(LwkException::class)override fun `createLbtcTx`(`outAddress`: Address, `satoshis`: ULong, `feeRate`: Float): Pset =
        callWithPointer {
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_wollet_create_lbtc_tx(it,
        FfiConverterTypeAddress.lower(`outAddress`),FfiConverterULong.lower(`satoshis`),FfiConverterFloat.lower(`feeRate`),
        _status)
}
        }.let {
            FfiConverterTypePset.lift(it)
        }
    
    
    @Throws(LwkException::class)override fun `descriptor`(): WolletDescriptor =
        callWithPointer {
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_wollet_descriptor(it,
        
        _status)
}
        }.let {
            FfiConverterTypeWolletDescriptor.lift(it)
        }
    
    
    @Throws(LwkException::class)override fun `finalize`(`pset`: Pset): Pset =
        callWithPointer {
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_wollet_finalize(it,
        FfiConverterTypePset.lower(`pset`),
        _status)
}
        }.let {
            FfiConverterTypePset.lift(it)
        }
    
    
    @Throws(LwkException::class)override fun `transactions`(): List<WalletTx> =
        callWithPointer {
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_wollet_transactions(it,
        
        _status)
}
        }.let {
            FfiConverterSequenceTypeWalletTx.lift(it)
        }
    
    

    companion object {
        
    /**
     * Construct a Watch-Only wallet object with a caller provided persister
     */
        fun `withCustomPersister`(`network`: Network, `descriptor`: WolletDescriptor, `persister`: ForeignPersisterLink): Wollet =
            Wollet(
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_constructor_wollet_with_custom_persister(FfiConverterTypeNetwork.lower(`network`),FfiConverterTypeWolletDescriptor.lower(`descriptor`),FfiConverterTypeForeignPersisterLink.lower(`persister`),_status)
})
        
    }
    
}

public object FfiConverterTypeWollet: FfiConverter<Wollet, Pointer> {

    override fun lower(value: Wollet): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): Wollet {
        return Wollet(value)
    }

    override fun read(buf: ByteBuffer): Wollet {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Wollet) = 8

    override fun write(value: Wollet, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}





/**
 * The output descriptors
 */
public interface WolletDescriptorInterface {
    
    companion object
}

/**
 * The output descriptors
 */
open class WolletDescriptor : FFIObject, WolletDescriptorInterface {

    constructor(pointer: Pointer): super(pointer)

    /**
     * This constructor can be used to instantiate a fake object.
     *
     * **WARNING: Any object instantiated with this constructor cannot be passed to an actual Rust-backed object.**
     * Since there isn't a backing [Pointer] the FFI lower functions will crash.
     * @param noPointer Placeholder value so we can have a constructor separate from the default empty one that may be
     *   implemented for classes extending [FFIObject].
     */
    constructor(noPointer: NoPointer): super(noPointer)
    constructor(`descriptor`: String) :
        this(
    uniffiRustCallWithError(LwkException) { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_constructor_wolletdescriptor_new(FfiConverterString.lower(`descriptor`),_status)
})

    override val cleanable: UniffiCleaner.Cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_free_wolletdescriptor(ptr, status)
                }
            }
        }
    }

    override fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_clone_wolletdescriptor(pointer!!, status)
        }
    }

    
    override fun toString(): String =
        callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_lwk_bindings_fn_method_wolletdescriptor_uniffi_trait_display(it,
        
        _status)
}
        }.let {
            FfiConverterString.lift(it)
        }

    
    companion object
    
}

public object FfiConverterTypeWolletDescriptor: FfiConverter<WolletDescriptor, Pointer> {

    override fun lower(value: WolletDescriptor): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): WolletDescriptor {
        return WolletDescriptor(value)
    }

    override fun read(buf: ByteBuffer): WolletDescriptor {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: WolletDescriptor) = 8

    override fun write(value: WolletDescriptor, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}



/**
 * Wallet chain
 */
enum class Chain {
    
    /**
     * External address, shown when asked for a payment.
     * Wallet having a single descriptor are considered External
     */
    EXTERNAL,
    /**
     * Internal address, used for the change
     */
    INTERNAL;
    companion object
}

public object FfiConverterTypeChain: FfiConverterRustBuffer<Chain> {
    override fun read(buf: ByteBuffer) = try {
        Chain.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: Chain) = 4

    override fun write(value: Chain, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







/**
 * Possible errors emitted
 */
sealed class LwkException: Exception() {
    
    class Generic(
        
        val `msg`: String
        ) : LwkException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    
    class PoisonException(
        
        val `msg`: String
        ) : LwkException() {
        override val message
            get() = "msg=${ `msg` }"
    }
    

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<LwkException> {
        override fun lift(error_buf: RustBuffer.ByValue): LwkException = FfiConverterTypeLwkError.lift(error_buf)
    }

    
}

public object FfiConverterTypeLwkError : FfiConverterRustBuffer<LwkException> {
    override fun read(buf: ByteBuffer): LwkException {
        

        return when(buf.getInt()) {
            1 -> LwkException.Generic(
                FfiConverterString.read(buf),
                )
            2 -> LwkException.PoisonException(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: LwkException): Int {
        return when(value) {
            is LwkException.Generic -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`msg`)
            )
            is LwkException.PoisonException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4
                + FfiConverterString.allocationSize(value.`msg`)
            )
        }
    }

    override fun write(value: LwkException, buf: ByteBuffer) {
        when(value) {
            is LwkException.Generic -> {
                buf.putInt(1)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
            is LwkException.PoisonException -> {
                buf.putInt(2)
                FfiConverterString.write(value.`msg`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




public object FfiConverterOptionalUInt: FfiConverterRustBuffer<UInt?> {
    override fun read(buf: ByteBuffer): UInt? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterUInt.read(buf)
    }

    override fun allocationSize(value: UInt?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterUInt.allocationSize(value)
        }
    }

    override fun write(value: UInt?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterUInt.write(value, buf)
        }
    }
}




public object FfiConverterOptionalString: FfiConverterRustBuffer<String?> {
    override fun read(buf: ByteBuffer): String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: String?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeUpdate: FfiConverterRustBuffer<Update?> {
    override fun read(buf: ByteBuffer): Update? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeUpdate.read(buf)
    }

    override fun allocationSize(value: Update?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeUpdate.allocationSize(value)
        }
    }

    override fun write(value: Update?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeUpdate.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeWalletTxOut: FfiConverterRustBuffer<WalletTxOut?> {
    override fun read(buf: ByteBuffer): WalletTxOut? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeWalletTxOut.read(buf)
    }

    override fun allocationSize(value: WalletTxOut?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeWalletTxOut.allocationSize(value)
        }
    }

    override fun write(value: WalletTxOut?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeWalletTxOut.write(value, buf)
        }
    }
}




public object FfiConverterSequenceTypeWalletTx: FfiConverterRustBuffer<List<WalletTx>> {
    override fun read(buf: ByteBuffer): List<WalletTx> {
        val len = buf.getInt()
        return List<WalletTx>(len) {
            FfiConverterTypeWalletTx.read(buf)
        }
    }

    override fun allocationSize(value: List<WalletTx>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeWalletTx.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<WalletTx>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeWalletTx.write(it, buf)
        }
    }
}




public object FfiConverterSequenceOptionalTypeWalletTxOut: FfiConverterRustBuffer<List<WalletTxOut?>> {
    override fun read(buf: ByteBuffer): List<WalletTxOut?> {
        val len = buf.getInt()
        return List<WalletTxOut?>(len) {
            FfiConverterOptionalTypeWalletTxOut.read(buf)
        }
    }

    override fun allocationSize(value: List<WalletTxOut?>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterOptionalTypeWalletTxOut.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<WalletTxOut?>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterOptionalTypeWalletTxOut.write(it, buf)
        }
    }
}



public object FfiConverterMapTypeAssetIdULong: FfiConverterRustBuffer<Map<AssetId, ULong>> {
    override fun read(buf: ByteBuffer): Map<AssetId, ULong> {
        val len = buf.getInt()
        return buildMap<AssetId, ULong>(len) {
            repeat(len) {
                val k = FfiConverterTypeAssetId.read(buf)
                val v = FfiConverterULong.read(buf)
                this[k] = v
            }
        }
    }

    override fun allocationSize(value: Map<AssetId, ULong>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterTypeAssetId.allocationSize(k) +
            FfiConverterULong.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<AssetId, ULong>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterTypeAssetId.write(k, buf)
            FfiConverterULong.write(v, buf)
        }
    }
}



public object FfiConverterMapTypeAssetIdLong: FfiConverterRustBuffer<Map<AssetId, Long>> {
    override fun read(buf: ByteBuffer): Map<AssetId, Long> {
        val len = buf.getInt()
        return buildMap<AssetId, Long>(len) {
            repeat(len) {
                val k = FfiConverterTypeAssetId.read(buf)
                val v = FfiConverterLong.read(buf)
                this[k] = v
            }
        }
    }

    override fun allocationSize(value: Map<AssetId, Long>): Int {
        val spaceForMapSize = 4
        val spaceForChildren = value.map { (k, v) ->
            FfiConverterTypeAssetId.allocationSize(k) +
            FfiConverterLong.allocationSize(v)
        }.sum()
        return spaceForMapSize + spaceForChildren
    }

    override fun write(value: Map<AssetId, Long>, buf: ByteBuffer) {
        buf.putInt(value.size)
        // The parens on `(k, v)` here ensure we're calling the right method,
        // which is important for compatibility with older android devices.
        // Ref https://blog.danlew.net/2017/03/16/kotlin-puzzler-whose-line-is-it-anyways/
        value.forEach { (k, v) ->
            FfiConverterTypeAssetId.write(k, buf)
            FfiConverterLong.write(v, buf)
        }
    }
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias AssetId = String
public typealias FfiConverterTypeAssetId = FfiConverterString



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias Hex = String
public typealias FfiConverterTypeHex = FfiConverterString

